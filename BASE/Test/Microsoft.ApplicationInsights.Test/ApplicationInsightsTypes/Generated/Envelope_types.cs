
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.10.1.0
//   File : Envelope_types.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------


// suppress "Missing XML comment for publicly visible type or member"
#pragma warning disable 1591


{
    using System.Collections.Generic;

    // [global::Bond.Attribute("Description", "System variables for a telemetry item.")]
    // [global::Bond.Schema]
    [System.CodeDom.Compiler.GeneratedCode("gbc", "0.10.1.0")]
    public partial class Envelope
    {

        // [global::Bond.Attribute("Description", "Type name of telemetry data item.")]
        // [global::Bond.Attribute("Name", "DataTypeName")]
        // [global::Bond.Attribute("MaxStringLength", "1024")]
        // [global::Bond.Id(20), global::Bond.Required]
        public string name { get; set; }

        // [global::Bond.Attribute("Description", "Event date time when telemetry item was created. This is the wall clock time on the client when the event was generated. There is no guarantee that the client's time is accurate. This field must be formatted in UTC ISO 8601 format, with a trailing 'Z' character, as described publicly on https://en.wikipedia.org/wiki/ISO_8601#UTC. Note: the number of decimal seconds digits provided are variable (and unspecified). Consumers should handle this, i.e. managed code consumers should not use format 'O' for parsing as it specifies a fixed length. Example: 2009-06-15T13:45:30.0000000Z.")]
        // [global::Bond.Attribute("Name", "SamplingRate")]
        // [global::Bond.Attribute("Description", "Sampling rate used in application. This telemetry item represents 1 / sampleRate actual telemetry items.")]
        // [global::Bond.Id(40)]
        public double sampleRate { get; set; }

        // [global::Bond.Attribute("Description", "Sequence field used to track absolute order of uploaded events.")]
        // [global::Bond.Attribute("Name", "SequenceNumber")]
        // [global::Bond.Attribute("MaxStringLength", "64")]
        // [global::Bond.Id(50)]
        public string seq { get; set; }

        // [global::Bond.Attribute("Description", "The application's instrumentation key. The key is typically represented as a GUID, but there are cases when it is not a guid. No code should rely on iKey being a GUID. Instrumentation key is case insensitive.")]
        // [global::Bond.Attribute("Name", "InstrumentationKey")]
        // [global::Bond.Attribute("MaxStringLength", "40")]
        // [global::Bond.Id(60)]
        public string iKey { get; set; }
        public long flags { get; set; }
            ver = 1;
            this.name = "";
            time = "";
            sampleRate = 100.0;
            seq = "";
            iKey = "";
            tags = new Dictionary<string, string>();
            data = new Base();


# This file contains partial code from the original project
# Some functionality may be missing or incomplete
